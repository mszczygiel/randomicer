{"version":3,"sources":["redux/Redux.ts","components/MiceTable.tsx","domain/Mouse.ts","domain/Parser.ts","components/MiceInput.tsx","domain/Randomizer.ts","algorithms/ExperimentalAlgorithm.ts","algorithms/SnakeAlgorithm.ts","algorithms/RandomizationAlgorithm.ts","components/Randomization.tsx","components/RandomizationResult.tsx","components/Help.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["miceLoaded","createAction","randomizationStarted","setDistribution","reducer","createReducer","mice","isRunningRandomization","handleType","state","action","payload","distribution","MiceTable","connect","props","Table","hover","size","map","m","key","id","tumors","length","tumorsVolume","Tumor","width","height","this","shorter","Math","min","max","Mouse","Array","from","t","volume","reduce","a","v","parseCSV","content","parseResult","parse","delimiter","skipEmptyLines","rxjs","data","pipe","bufferCount","w","l1","l2","trim","skip","v1","v2","replace","filter","Number","parseFloat","toArray","subscribe","x","readMouse","dispatchProps","onLoaded","MiceInput","undefined","onLoad","ev","target","result","className","type","accept","onChange","event","file","files","item","reader","FileReader","onloadend","readAsText","Group","median","volumes","mean","std","Distribution","groups","RandomizationError","message","ExperimentalAlgorithm","settings","numberOfIterations","gen","initialState","iterate","p","shuffle","resultSelector","scheduler","take","mergeMap","createDistribution","rxMin","d1","d2","penalty","toPromise","expectedMiceCount","micePerGroup","numberOfGroups","buffered","g","arr","currentIndex","res","randomIndex","floor","random","temporaryValue","meanNorm","sum","tumorsMean","medianNorm","tumorsMedian","g1","acc","g2","abs","distance","SnakeAlgorithm","sorted","sort","m1","m2","i","push","toTake","groupIndex","direction","resultGroups","Promise","resolve","randomizationAlgorithms","randomizationAlgorithmNames","name","defaultRandomizationAlgorithm","setRandomizationResult","Randomization","randomizationRunning","useState","noOfGroups","setNoOfGroups","setMicePerGroup","minTumorVolume","setMinTumorVolume","maxTumorVolume","setMaxTumorVolume","algorithm","setAlgorithm","errorMessage","setErrorMessage","randomizationPossible","runRandomization","thresholds","qualifiedMice","mouse","minTumorsVolume","maxTumorsVolume","randomize","then","dist","Row","Col","htmlFor","placeholder","value","e","valueAsNumber","step","md","alg","find","Error","findAlgorithm","Alert","variant","Button","disabled","onClick","role","DownloadDistributionComponent","symbols","blob","File","idx","group","header","tumorsStdDev","forEach","renderGroup","href","URL","createObjectURL","download","GroupComponent","toFixed","RandomizationResult","Help","open","setOpen","aria-expanded","viewBox","fill","xmlns","fillRule","d","Collapse","in","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","Container","sm","offset","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ae5d038e.chunk.js","sourcesContent":["import { createReducer, createAction } from \"typesafe-actions\"\nimport { Mouse } from \"../domain/Mouse\";\nimport { Distribution } from \"../domain/Randomizer\";\n\nexport interface State {\n    mice: Mouse[];\n    distribution?: Distribution;\n    isRunningRandomization: boolean;\n}\n\nconst MICE_LOADED = \"@randomicer/MICE_LOADED\";\nconst RANDOMIZATION_STARTED = \"@randomicer/RANDOMIZATION_STARTED\";\nconst SET_DISTRIBUTION = \"@randomicer/SET_DISTRIBUTION\";\n\nexport interface MiceLoaded {\n    mice: Mouse[];\n}\n\nexport const miceLoaded = createAction(MICE_LOADED)<MiceLoaded>();\nexport const randomizationStarted = createAction(RANDOMIZATION_STARTED)<void>();\nexport const setDistribution = createAction(SET_DISTRIBUTION)<Distribution>();\n\n\nconst initialState: State = {\n    mice: [],\n    isRunningRandomization: false\n};\n\nexport type Action = ReturnType<typeof miceLoaded>\n    | ReturnType<typeof setDistribution>\n    | ReturnType<typeof randomizationStarted>\n\nexport const reducer = createReducer<State, Action>(initialState)\n    .handleType(MICE_LOADED, (state, action) => {\n        return { ...state, mice: action.payload.mice };\n    }).handleType(RANDOMIZATION_STARTED, (state, action) => {\n        return { ...state, isRunningRandomization: true }\n    })\n    .handleType(SET_DISTRIBUTION, (state, action) => {\n        return { ...state, distribution: action.payload, isRunningRandomization: false }\n    });\n","import { connect } from \"react-redux\";\nimport { State } from \"../redux/Redux\";\nimport React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\ntype Props = ReturnType<typeof mapStateToProps>\n\nconst MiceTableComponent: React.FC<Props> = props => {\n    return (<Table hover size=\"sm\" >\n        <thead>\n            <tr>\n                <th>mouse id</th>\n                <th>tumors</th>\n                <th>volume</th>\n            </tr>\n        </thead>\n        <tbody>\n            {props.mice.map(m => (<tr key={m.id}>\n                <td>{m.id}</td>\n                <td>{m.tumors.length}</td>\n                <td>{m.tumorsVolume()}</td>\n            </tr>))}\n        </tbody>\n    </Table>);\n};\n\nconst mapStateToProps = (state: State) => (\n    { mice: state.mice }\n);\n\nexport const MiceTable = connect(mapStateToProps)(MiceTableComponent)\n","\nexport class Tumor {\n    readonly width: number;\n    readonly height: number;\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public volume(): number {\n        const shorter = Math.min(this.width, this.height);\n        const longer = Math.max(this.width, this.height);\n        return 0.5 * shorter * shorter * longer\n    }\n}\n\nexport class Mouse {\n    readonly id: string;\n    readonly tumors: Array<Tumor>;\n\n    constructor(id: string, tumors: Array<Tumor>) {\n        this.id = id;\n        this.tumors = Array.from(tumors);\n    }\n\n    public tumorsVolume(): number {\n        return this.tumors.map(t => t.volume()).reduce((a, v) => v + a, 0);\n    }\n}\n\n","import { Mouse, Tumor } from \"./Mouse\";\nimport { parse } from \"papaparse\";\nimport * as rxjs from \"rxjs\";\nimport { bufferCount, map, skip, filter, toArray } from \"rxjs/operators\";\n\nexport function parseCSV(content: string): Mouse[] {\n    const config = { delimiter: \";\", skipEmptyLines: true };\n    const parseResult = parse(content, config);\n    let mice: Mouse[] = [];\n    rxjs.from(parseResult.data)\n        .pipe(\n            bufferCount(2),\n            map(w => readMouse(w[0], w[1])),\n            toArray())\n        .subscribe(m => mice = m);\n    return mice;\n}\n\nfunction readMouse(l1: string[], l2: string[]): Mouse {\n    const id = l1[0].trim();\n    let tumors: Tumor[] = [];\n    rxjs.zip(rxjs.from(l1), rxjs.from(l2))\n        .pipe(skip(1),\n            map(([v1, v2]) => [v1.trim().replace(\",\", \".\"), v2.trim().replace(\",\", \".\")]),\n            filter(([v1, v2]) => v1.length > 0 && v2.length > 0),\n            map(([v1, v2]) => new Tumor(Number.parseFloat(v1), Number.parseFloat(v2))),\n            toArray()).subscribe(x => tumors = x);\n\n    return new Mouse(id, tumors);\n}\n","import { connect } from \"react-redux\";\nimport React, { ChangeEvent } from \"react\";\nimport { miceLoaded } from \"../redux/Redux\";\nimport { parseCSV } from \"../domain/Parser\";\n\ntype Props = typeof dispatchProps;\n\nconst MiceInputComponent: React.FC<Props> = props => {\n    function onLoad(ev: ProgressEvent<FileReader>): any {\n        if (typeof ev.target?.result === 'string') {\n            const mice = parseCSV(ev.target.result);\n            props.onLoaded({ mice: mice });\n        }\n    }\n    function handleUpload(event: ChangeEvent<HTMLInputElement>): void {\n        const file = event.target.files?.item(0);\n        if (file) {\n            const reader = new FileReader();\n            reader.onloadend = onLoad;\n            reader.readAsText(file);\n        }\n    }\n    return (\n        <div className=\"input-group\">\n            <input type=\"file\" accept=\".txt,.csv,text/plain,text/csv\" onChange={handleUpload}></input>\n        </div>\n    );\n};\n\nconst dispatchProps = {\n    onLoaded: miceLoaded\n};\n\nexport const MiceInput = connect(undefined, dispatchProps)(MiceInputComponent);\n","import { Mouse } from \"./Mouse\";\nimport { mean, median, std } from \"mathjs\";\nimport { RandomizationAlgorithm } from \"../algorithms/RandomizationAlgorithm\";\n\n\nexport interface RandomizationSettings {\n    micePerGroup: number;\n    numberOfGroups: number;\n};\n\nexport interface MiceSelectionThresholds {\n    minTumorsVolume?: number;\n    maxTumorsVolume?: number;\n};\n\nexport class Group {\n    readonly mice: Mouse[];\n    constructor(mice: Mouse[]) {\n        this.mice = mice;\n    }\n\n    public tumorsMedian(): number {\n        return median(this.volumes());\n    }\n\n    public tumorsMean(): number {\n        return mean(this.volumes());\n    }\n\n    public tumorsStdDev(): number {\n        return std(this.volumes());\n    }\n\n    private volumes(): number[] {\n        return this.mice.map(m => m.tumorsVolume());\n    }\n};\n\nexport class Distribution {\n    readonly groups: Group[];\n\n    constructor(groups: Group[]) {\n        this.groups = groups;\n    }\n};\n\nexport class RandomizationError {\n    readonly message: string;\n\n    constructor(message: string) {\n        this.message = message;\n    }\n};\n\nexport function randomize(mice: Mouse[], algorithm: RandomizationAlgorithm, settings: RandomizationSettings, thresholds: MiceSelectionThresholds): Promise<Distribution> | RandomizationError {\n    const qualifiedMice = mice.filter(mouse => thresholds.minTumorsVolume == null ? true : mouse.tumorsVolume() >= thresholds.minTumorsVolume)\n        .filter(mouse => thresholds.maxTumorsVolume == null ? true : mouse.tumorsVolume() <= thresholds.maxTumorsVolume);\n    const expectedMiceCount = settings.micePerGroup * settings.numberOfGroups;\n    if (expectedMiceCount > qualifiedMice.length) {\n        return new RandomizationError(`Number of mice meeting criteria (${qualifiedMice.length}) is less than number of groups x number of mice per group (${expectedMiceCount})`);\n    }\n    return algorithm.randomize(qualifiedMice, settings);\n}\n","import { GenerateOptions } from \"rxjs/internal/observable/generate\";\nimport { Mouse } from \"../domain/Mouse\";\nimport { Distribution, Group, RandomizationSettings } from \"../domain/Randomizer\";\nimport { RandomizationAlgorithm } from \"./RandomizationAlgorithm\";\nimport { abs, min, max, sum } from \"mathjs\";\nimport { map, mergeMap, reduce, min as rxMin, take, bufferCount, toArray } from \"rxjs/operators\";\nimport * as rxjs from 'rxjs';\n\nexport class ExperimentalAlgorithm implements RandomizationAlgorithm {\n    name(): string {\n        return \"experimental\";\n    }\n    randomize(mice: Mouse[], settings: RandomizationSettings): Promise<Distribution> {\n        const numberOfIterations = max(1000, min(mice.length * mice.length, 10000));\n        const gen: GenerateOptions<Mouse[], Mouse[]> = {\n            initialState: [...mice],\n            iterate: p => this.shuffle(p),\n            resultSelector: m => m,\n            scheduler: rxjs.asyncScheduler\n        };\n\n\n        return rxjs.generate(gen).pipe(\n            take(numberOfIterations),\n            mergeMap(mice => this.createDistribution(mice, settings)),\n            rxMin((d1, d2) => ExperimentalAlgorithm.penalty(d1) - ExperimentalAlgorithm.penalty(d2))\n        ).toPromise();\n    }\n\n    public static penalty(distribution: Distribution): number {\n        let res = 0;\n        const meanNorm = sum(distribution.groups.map((g) => g.tumorsMean()));\n        const medianNorm = sum(distribution.groups.map((g) => g.tumorsMedian()));\n\n        function distance(g1: Group, g2: Group) {\n            const mean = abs(g1.tumorsMean() - g2.tumorsMean()) / meanNorm;\n            const med = abs(g1.tumorsMedian() - g2.tumorsMedian()) / medianNorm;\n            return med * 2 + mean;\n        }\n\n        rxjs.from(distribution.groups).pipe(\n            mergeMap(g => rxjs.from(distribution.groups)\n                .pipe(map(g1 => [g, g1]))))\n            .pipe(\n                reduce((acc, [g1, g2]) => acc + distance(g1, g2), 0))\n            .subscribe(v => { res = v });\n        return res;\n    }\n\n    private createDistribution(mice: Mouse[], settings: RandomizationSettings) {\n        const expectedMiceCount = settings.micePerGroup * settings.numberOfGroups;\n        const distribution = rxjs.from(mice)\n            .pipe(\n                take(expectedMiceCount),\n                bufferCount(settings.micePerGroup),\n                toArray(),\n                map(buffered => buffered.map(g => new Group(g))),\n                map(groups => new Distribution(groups)))\n        return distribution;\n    }\n    private shuffle<T>(arr: T[]): T[] {\n        let currentIndex = arr.length;\n        const res = [...arr];\n        while (0 !== currentIndex) {\n\n            const randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            const temporaryValue = res[currentIndex];\n            res[currentIndex] = res[randomIndex];\n            res[randomIndex] = temporaryValue;\n        }\n\n        return res;\n    }\n\n}\n","import { Mouse } from \"../domain/Mouse\";\nimport { Distribution, Group, RandomizationSettings } from \"../domain/Randomizer\";\nimport { RandomizationAlgorithm } from \"./RandomizationAlgorithm\";\n\nexport class SnakeAlgorithm implements RandomizationAlgorithm {\n    name(): string {\n        return \"snake\";\n    }\n    randomize(mice: Mouse[], settings: RandomizationSettings): Promise<Distribution> {\n        const sorted = [...mice].sort((m1, m2) => m2.tumorsVolume() - m1.tumorsVolume());\n        const groups: Mouse[][] = [];\n        for (let i = 0; i < settings.numberOfGroups; i++) {\n            groups.push([]);\n        }\n        const toTake = settings.micePerGroup * settings.numberOfGroups;\n        var groupIndex = 0;\n        var direction = 1;\n        for (let i = 0; i < toTake; i++) {\n            groups[groupIndex].push(sorted[i]);\n            if (direction === 1 && groupIndex === settings.numberOfGroups - 1) {\n                direction = -1;\n            } else if (direction === -1 && groupIndex === 0) {\n                direction = 1\n            } else {\n                groupIndex += direction;\n            }\n        }\n        const resultGroups = groups.map(g => new Group(g));\n        return Promise.resolve(new Distribution(resultGroups));\n    }\n\n}\n","import { Mouse } from \"../domain/Mouse\";\nimport { Distribution, RandomizationSettings } from \"../domain/Randomizer\";\nimport { ExperimentalAlgorithm } from \"./ExperimentalAlgorithm\";\nimport { SnakeAlgorithm } from \"./SnakeAlgorithm\";\n\n\nexport interface RandomizationAlgorithm {\n    name(): string;\n    randomize(mice: Mouse[], settings: RandomizationSettings): Promise<Distribution>;\n};\n\n\nconst randomizationAlgorithms: RandomizationAlgorithm[] = [new ExperimentalAlgorithm(), new SnakeAlgorithm()];\nexport const randomizationAlgorithmNames = randomizationAlgorithms.map(a => a.name());\nexport const defaultRandomizationAlgorithm = randomizationAlgorithms[0];\nexport function findAlgorithm(name: string): RandomizationAlgorithm {\n    const alg = randomizationAlgorithms.find(a => a.name() === name);\n    if (alg === undefined) {\n        throw new Error(`algorithm ${name} not found`);\n    } else {\n        return alg;\n    }\n}\n","import { connect } from \"react-redux\";\nimport React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { MiceInput } from \"./MiceInput\";\nimport { State, setDistribution, randomizationStarted } from \"../redux/Redux\";\nimport { randomize, RandomizationError } from \"../domain/Randomizer\";\nimport { defaultRandomizationAlgorithm, findAlgorithm, randomizationAlgorithmNames } from \"../algorithms/RandomizationAlgorithm\";\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\n\nconst RandomizationComponent: React.FC<Props> = props => {\n    const [noOfGroups, setNoOfGroups] = useState(2);\n    const [micePerGroup, setMicePerGroup] = useState(2);\n    const [minTumorVolume, setMinTumorVolume] = useState<number | undefined>(undefined);\n    const [maxTumorVolume, setMaxTumorVolume] = useState<number | undefined>(undefined);\n    const [algorithm, setAlgorithm] = useState(defaultRandomizationAlgorithm)\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n    const randomizationPossible = props.mice.length > 1 && !props.randomizationRunning;\n\n    function showError() {\n        if (errorMessage.trim().length > 0) {\n            return <Alert variant=\"danger\">{errorMessage}</Alert>\n        } else {\n            return null;\n        }\n    }\n\n    function runRandomization() {\n        const res = randomize(props.mice, algorithm,\n            {\n                micePerGroup: micePerGroup,\n                numberOfGroups: noOfGroups\n            }, {\n            minTumorsVolume: minTumorVolume,\n            maxTumorsVolume: maxTumorVolume\n        }\n        );\n\n        if (res instanceof RandomizationError) {\n            setErrorMessage(res.message);\n        } else if (res instanceof Promise) {\n            props.randomizationStarted();\n            res.then(dist => props.setRandomizationResult(dist));\n        }\n    }\n\n    function progressIndicator() {\n        if (props.randomizationRunning) {\n            return (<span className=\"spinner-border spinner-border-sm\" role=\"status\"></span>)\n        } else {\n            return null;\n        }\n    }\n\n    return (\n        <>\n            <Row>\n                <Col className=\"text-center\">\n                    <MiceInput />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <label htmlFor=\"no-of-groups\">No of groups</label>\n                    <div className=\"input-group\">\n                        <input id=\"no-of-groups\"\n                            className=\"form-control\"\n                            type='number'\n                            placeholder=\"No of groups\"\n                            min=\"2\"\n                            value={noOfGroups}\n                            onChange={e => setNoOfGroups(e.target.valueAsNumber)}\n                        >\n                        </input>\n                    </div>\n                </Col>\n                <Col>\n                    <label htmlFor=\"mice-per-group\">Mice per group</label>\n                    <div className=\"input-group\">\n                        <input id=\"mice-per-group\"\n                            className=\"form-control\"\n                            type='number'\n                            placeholder=\"Mice per group\"\n                            min=\"2\"\n                            value={micePerGroup}\n                            onChange={e => setMicePerGroup(e.target.valueAsNumber)}\n                        >\n                        </input>\n                    </div>\n                </Col>\n                <Col>\n                    <label htmlFor=\"lower-tumor-threshold\">Min TV</label>\n                    <div className=\"input-group\">\n                        <input id=\"lower-tumor-threshold\"\n                            className=\"form-control\"\n                            type='number'\n                            step=\"0.01\"\n                            placeholder=\"Lower TV threshold\" min=\"0\"\n                            value={minTumorVolume || ''}\n                            onChange={e => {\n                                if (e.target.value === '') {\n                                    setMinTumorVolume(undefined);\n                                } else {\n                                    setMinTumorVolume(e.target.valueAsNumber);\n                                }\n                            }}\n                        >\n\n                        </input>\n                    </div>\n                </Col>\n                <Col>\n                    <label htmlFor=\"upper-tumor-threshold\">Max TV</label>\n                    <div className=\"input-group\">\n                        <input id=\"upper-tumor-threshold\"\n                            className=\"form-control\"\n                            type='number'\n                            step=\"0.01\"\n                            placeholder=\"Upper TV threshold\"\n                            min=\"0\"\n                            value={maxTumorVolume || ''}\n                            onChange={e => {\n                                if (e.target.value === '') {\n                                    setMaxTumorVolume(undefined);\n                                } else {\n                                    setMaxTumorVolume(e.target.valueAsNumber);\n                                }\n                            }}></input>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col md=\"3\">\n                    <label htmlFor=\"algorithm\">Algorithm</label>\n                    <div className=\"input-group\">\n                        <select id=\"algorithm\" onChange={\n                            e => {\n                                setAlgorithm(findAlgorithm(e.target.value));\n                            }\n                        }>\n                            {randomizationAlgorithmNames.map(name =>\n                                (<option key={`algorithm-${name}`} className=\"form-control\" value={name}>{name}</option>)\n                            )}\n                        </select>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {showError()}\n                </Col>\n            </Row>\n            <Row className=\"mt-3\">\n                <Col className=\"text-center\">\n                    <Button\n                        disabled={!randomizationPossible}\n                        className=\"btn btn-primary\"\n                        onClick={() => runRandomization()}\n                    >\n                        {progressIndicator()}\n                        Randomize\n                    </Button>\n                </Col>\n            </Row>\n        </>);\n};\n\nconst mapStateToProps = (state: State) => ({\n    mice: state.mice,\n    randomizationRunning: state.isRunningRandomization\n});\n\nconst dispatchProps = {\n    setRandomizationResult: setDistribution,\n    randomizationStarted: randomizationStarted\n};\n\nexport const Randomization = connect(mapStateToProps, dispatchProps)(RandomizationComponent);\n","import { connect } from \"react-redux\";\nimport { State } from \"../redux/Redux\";\nimport { Group, Distribution } from \"../domain/Randomizer\";\nimport React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\n\ntype Props = ReturnType<typeof mapDispatchToProps>;\n\nconst RandomizationResultComponent: React.FC<Props> = props => {\n    if (props.distribution === undefined) {\n        return null;\n    }\n\n    return (<>\n        <DownloadDistributionComponent distribution={props.distribution}></DownloadDistributionComponent>\n        {props.distribution.groups.map((g, idx) => <GroupComponent key={`group-${idx}`} group={g} id={idx}></GroupComponent>)}\n    </>);\n};\n\ninterface GroupComponentProps {\n    group: Group,\n    id: number\n};\n\ninterface DownloadDistributionComponentProps {\n    distribution: Distribution\n};\n\nconst DownloadDistributionComponent: React.FC<DownloadDistributionComponentProps> = props => {\n    const symbols = [\"_ _\", \"o _\", \"_ o\", \"o o\", \"oo _\", \"_ oo\", \"oo oo\", \"o oo\", \"oo o\"];\n    function renderGroup(group: Group, idx: number): string {\n        const header = `Sym;LP;TV;NT;G${idx};AVG;${group.tumorsMean()};MED;${group.tumorsMedian()};SD;${group.tumorsStdDev()}`;\n        let content = \"\";\n        group.mice.sort((m1, m2) => m2.tumorsVolume() - m1.tumorsVolume()).forEach((mouse, idx) => {\n            const symbol = symbols[idx % symbols.length];\n            content += `${symbol};${mouse.id};${mouse.tumorsVolume()};${mouse.tumors.length}\\n`\n        });\n        return `${header}\\n${content}`;\n    }\n    const blob = new File(props.distribution.groups.map((g, idx) => renderGroup(g, idx + 1)), \"result.csv\");\n    const href = URL.createObjectURL(blob);\n    return (<a href={href} download><Button variant=\"success\">Download</Button></a>);\n}\n\n\nconst GroupComponent: React.FC<GroupComponentProps> = props => {\n    const mice = props.group.mice.sort((m1, m2) => m2.tumorsVolume() - m1.tumorsVolume());\n    return (\n        <>\n            <h4>G{props.id + 1} AVG({props.group.tumorsMean().toFixed(3)}) MED({props.group.tumorsMedian().toFixed(3)}) SD({props.group.tumorsStdDev().toFixed(3)})</h4>\n            <Table size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>TV</th>\n                        <th>NT</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {mice.map(mouse => (\n                        <tr key={`mouse-${mouse.id}`}>\n                            <td>{mouse.id}</td>\n                            <td>{mouse.tumorsVolume()}</td>\n                            <td>{mouse.tumors.length}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        </>);\n}\n\nconst mapDispatchToProps = (state: State) => ({\n    distribution: state.distribution\n});\n\nexport const RandomizationResult = connect(mapDispatchToProps)(RandomizationResultComponent);\n","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Collapse from \"react-bootstrap/Collapse\";\n\ninterface OwnProps {\n\n}\ntype Props = OwnProps;\n\nexport const Help: React.FC<Props> = () => {\n    const [open, setOpen] = useState(false);\n    return (\n        <>\n            <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => setOpen(!open)}\n                aria-expanded={open}\n            >\n                <svg className=\"bi bi-question-circle\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\" />\n                    <path d=\"M5.25 6.033h1.32c0-.781.458-1.384 1.36-1.384.685 0 1.313.343 1.313 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.007.463h1.307v-.355c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.326 0-2.786.647-2.754 2.533zm1.562 5.516c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z\" />\n                </svg>\n            </Button>\n            <Collapse in={open}>\n                <div className=\"text-justify\">\n                    <h5>\n                        File format:\n                    </h5>\n                    <p>\n                        Each mouse entry spans 2 rows and N columns (where N = max number of tumors in any mouse). Columns are separated with <em>;</em>\n                    </p>\n                    <p>\n                        For example, to represent 5 mice, where mouse with id 2 has two tumors (3.5x4.1 and 1.2x2.1), whereas rest have 1 (all 3.5x4.1) one could prepare file with the following content:\n                    </p>\n                    <pre>\n                        1;3.5;<br />\n                        ;4.1;<br />\n                        2;3.5;1.2<br />\n                        ;4.1;2.1<br />\n                        3;3.5;<br />\n                        ;4.1;<br />\n                        4;4.1;<br />\n                        ;3.5;<br />\n                        5;3.5;<br />\n                        ;4.1;\n                    </pre>\n                    <h5>\n                        Issues\n                    </h5>\n                    <p>\n                        If you encounter any issue or have improvement idea, please use raise issue on <a href=\"https://github.com/mszczygiel/randomicer/issues\" target=\"__blank\">Github</a>\n                    </p>\n                </div>\n            </Collapse>\n        </>\n    );\n};\n","import React from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { reducer } from './redux/Redux';\nimport { MiceTable } from './components/MiceTable';\nimport { Randomization } from './components/Randomization';\nimport { RandomizationResult } from './components/RandomizationResult';\nimport { Help } from './components/Help';\n\nconst store = createStore(reducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col className=\"text-center\">\n            <h1 className=\"text-primary\">Randomicer</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={{offset: 6}} className=\"text-right\">\n            <Help></Help>\n          </Col>\n        </Row>\n        <Randomization />\n        <hr />\n        <Row>\n          <Col>\n            <h3 className=\"text-center\">Input</h3>\n            <MiceTable />\n          </Col>\n          <Col className=\"text-center\">\n            <h3>Output</h3>\n            <RandomizationResult></RandomizationResult>\n          </Col>\n        </Row>\n\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}